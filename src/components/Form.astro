---
import Message from "./Message.astro";
---

<form class="flex form">
  <Message />
  <h3>Contact Form</h3>
  <div class="flex contact-info">
    <div class="flex">
      <img src="/Phone_Num.svg" alt="Phone icon" srcset="" />
      <h4>Phone Number</h4>
    </div>
    <div class="flex">
      <img src="/email.svg" alt="Email icon" srcset="" />
      <h4>Email@emial.com</h4>
    </div>
  </div>
  <p>the fields with <span>*</span> has to be filled.</p>
  <label for="name">Name<span>*</span>:</label>
  <input class="field" required type="text" id="name" name="name" />
  <label for="email">Email<span>*</span>:</label>
  <input class="field" required type="email" id="email" name="email" />
  <label for="phoneNum">Phone Number:</label>
  <input class="field" type="text" id="phoneNum" name="phoneNum" />
  <label for="description">Description<span>*</span>:</label>
  <textarea class="field" required name="description" id="description" rows="10"
  ></textarea>
  <button
    id="form-btn"
    class="btn form-btn"
    type="submit"
    onclick="send(event)"
  >
    Submit
  </button>
</form>

<style>
  span {
    color: var(--color-tertiary);
  }
  .form p {
  }

  .form {
    transition: all 800ms ease-in-out;
    flex-direction: column;
    background-color: rgba(7, 8, 36, 0.83);
    width: 80%;
    border-radius: 2rem;
    padding: 7rem 5rem;
    position: relative;
  }
  .contact-info {
    width: 60%;
    margin-bottom: 2rem;
    justify-content: space-between;
  }
  .contact-info img {
    height: 3rem;
    margin-right: 1rem;
  }
  .form h3 {
    width: 100%;
    font-size: 7rem;
    text-align: center;
    font-weight: bold;
    position: absolute;
    transform: translate(-50%, -50%);
    top: 0;
    left: 50%;
  }
  .form:hover {
    transform: scale(1.02);
  }
  .form label {
    font-weight: bold;
    font-size: 1.2rem;
    width: 100%;
    text-align: left;
  }
  .form input {
    padding: 2px 15px;
    width: 100%;
    height: 2.5rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
    border-radius: 10px;
    border: none;
  }
  .form input:focus-visible {
    outline: none;
  }
  .form textarea {
    margin-bottom: 1rem;
    margin-top: 1rem;
    border-radius: 10px;
    width: 100%;
    height: 15rem;
    resize: none;
    border: none;
    padding: 10px 15px;
  }
  .form textarea:focus-visible {
    outline: none;
  }

  .form-btn {
    min-width: fit-content;
    width: 25%;
    color: var(--color-tertiary);
    border-color: var(--color-tertiary);
  }
  .form-btn:hover {
    color: white;
    background-color: var(--color-dark);
  }
  @media screen and (max-width: 1100px) {
    .form {
      width: 100%;
      padding: 3rem;
    }
    .contact-info {
      width: 70%;
    }
    
    .form h3 {
      font-size: 5rem;
      position: initial;
      transform: translate(0%, 0%);
    }
  }
  @media screen and (max-width: 700px) {
    .contact-info {
      width: fit-content;
      height: 7rem;
      flex-direction: column;
      align-items: flex-start;
    }
    .form {
      padding: 1.5rem;
    }
  }
  @media screen and (max-width: 450px) {
    .form h3 {
      font-size: 3.4rem;
    }
  }
</style>

<script is:inline>
  var btn = document.getElementById("form-btn");
  const message = (status) => {
    var card = document.getElementById("message");
    var message = status
      ? document.createTextNode("Your message have been sent successfully")
      : document.createTextNode("Your message couldnâ€™t be sent out!");
    var text = status
      ? document.createTextNode("thanks for contacting us")
      : document.createTextNode("Please try agin later");
    card.children[0].appendChild(message);
    status
      ? card.children[0].classList.add("good") &&
        card.children[0].classList.remove("bad")
      : card.children[0].classList.add("bad") &&
        card.children[0].classList.remove("good");
    card.children[1].appendChild(text);
    card.children[2].setAttribute(
      "src",
      status ? "/success.svg" : "/failure.svg"
    );
    card.classList.add("visible");
    card.classList.remove("hidden");
    setTimeout(() => {
      card.classList.remove("visible");
      card.classList.add("hidden");
    }, 2000);
    setTimeout(() => {
      card.children[1].innerHTML = "";
      card.children[0].innerHTML = "";
    }, 4000);
  };
  const send = async (event) => {
    event.preventDefault();
    btn.setAttribute("disabled", "");
    var rawData = document.getElementsByClassName("field");
    var data = {
      name: rawData[0].value,
      email: rawData[1].value,
      phoneNum: rawData[2].value || 0,
      description: rawData[3].value,
    };

    fetch("http://localhost:3001/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(data),
    }).then((res) => {
      if (res.status == 200) {
        message(true);
        btn.removeAttribute("disabled");
      } else {
        message(false);
        btn.removeAttribute("disabled");
      }
    });
  };
</script>
